// Generated by CoffeeScript 1.6.3
(function() {
  var country, csv, nested_age_data, nested_data, on_province_clicked, plot_age_horz_stacked_bar, plot_table, province_id_map, toTitleCase;

  csv = [];

  nested_data = [];

  nested_age_data = [];

  province_id_map = {
    'c4sa_pr_kzn': 'KWAZULU-NATAL',
    'c4sa_pr_fs': 'FREE STATE',
    'c4sa_pr_ec': 'EASTERN CAPE',
    'c4sa_pr_mp': 'MPUMALANGA',
    'c4sa_pr_lim': 'LIMPOPO',
    'c4sa_pr_nc': 'NORTHERN CAPE',
    'c4sa_pr_nw': 'NORTH WEST',
    'c4sa_pr_wc': 'WESTERN CAPE',
    'c4sa_pr_gp': 'GAUTENG'
  };

  toTitleCase = function(str) {
    return str.replace(/\w\S*/g, function(txt) {
      return txt[0].toUpperCase() + txt.slice(1, +(txt.length - 1) + 1 || 9e9).toLowerCase();
    });
  };

  plot_age_horz_stacked_bar = function(data) {
    var age_groups, color, height, legend, margin, state, svg, width, x, xAxis, y, yAxis;
    margin = {
      top: 30,
      right: 100,
      bottom: 30,
      left: 250
    };
    width = 660 - margin.left - margin.right;
    height = 700 - margin.top - margin.bottom;
    x = d3.scale.linear().rangeRound([0, width]);
    y = d3.scale.ordinal().rangeRoundBands([0, height], .1);
    color = d3.scale.ordinal().range(["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00"]);
    xAxis = d3.svg.axis().scale(x).orient("bottom").tickFormat(d3.format(".0%"));
    yAxis = d3.svg.axis().scale(y).orient("left").tickFormat(function(x) {
      return toTitleCase(x);
    });
    document.getElementById('results').innerHTML = '';
    svg = d3.select("#results").append("svg").attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
    age_groups = ['less than 30', '30 - 39', '40 - 49', '50 - 59', '60 and over'];
    color.domain(d3.keys(age_groups));
    console.log('domain: ', color.domain());
    console.log('color: ', color);
    data.forEach(function(d) {
      var age_group, transformed, x0, _i, _len, _ref;
      transformed = {};
      _ref = d.values;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        age_group = _ref[_i];
        transformed[age_group.key] = age_group.values;
      }
      console.log('transformed: ', transformed);
      x0 = 0;
      d.ages = color.domain().map(function(index) {
        var key, known, x1, _ref1;
        key = age_groups[index];
        known = (_ref1 = key in transformed) != null ? _ref1 : {
          "true": false
        };
        x1 = 0;
        if (known) {
          x1 = transformed[key];
        }
        return {
          name: key,
          x0: x0,
          x1: x0 += x1
        };
      });
      return d.ages.forEach(function(d) {
        d.x0 /= x0;
        return d.x1 /= x0;
      });
    });
    console.log('data is now: ', data);
    data.sort(function(a, b) {
      return b.ages[0].x1 - a.ages[0].x1;
    });
    y.domain(data.map(function(d) {
      return d.key;
    }));
    svg.append("g").attr("class", "x axis").attr("transform", "translate(0," + height + ")").call(xAxis);
    svg.append("g").attr("class", "y axis").call(yAxis);
    state = svg.selectAll(".state").data(data).enter().append("g").attr("class", "state").attr("transform", function(d) {
      return "translate(0," + y(d.key) + ")";
    });
    state.selectAll('rect').data(function(d) {
      return d.ages;
    }).enter().append("rect").attr("height", y.rangeBand()).attr("x", function(d) {
      return x(d.x0);
    }).attr("width", function(d) {
      return x(d.x1) - x(d.x0);
    }).style("fill", function(d) {
      return color(d.name);
    });
    legend = svg.select(".state:nth-child(3)").selectAll(".legend").data(function(d) {
      return d.ages;
    }).enter().append("g").attr("class", "legend").attr("transform", function(d) {
      return "translate(" + x((d.x0 + d.x1) / 2) + ",0)rotate(-34)";
    });
    return legend.append("text").attr("y", -5).attr("dx", "1em").text(function(d) {
      return d.name;
    });
  };

  plot_table = function(data, columns) {
    var cells, table, table_rows, tbody, thead;
    table = d3.select("#container").append("table");
    thead = table.append("thead");
    tbody = table.append("tbody");
    thead.append("tr").selectAll("th").data(columns).enter().append("th").text(function(column) {
      return column;
    });
    table_rows = tbody.selectAll("tr").data(data).enter().append("tr");
    return cells = table_rows.selectAll("td").data(function(row) {
      return columns.map(function(column) {
        return {
          column: column,
          value: row[column]
        };
      });
    }).enter().append("td").text(function(d) {
      return d.value;
    });
  };

  d3.csv("candidates.csv").get(function(error, data) {
    var age_data, color_map, party_base, test_data;
    color_map = {
      '60 and over': 0,
      '50 - 59': 1
    };
    console.log('data: ', data);
    party_base = d3.nest().key(function(d) {
      return d.province;
    }).sortKeys(d3.ascending).key(function(d) {
      return d.party;
    }).sortKeys(d3.ascending);
    age_data = party_base.key(function(d) {
      return d.age;
    }).sortKeys(d3.ascending).rollup(function(leaves) {
      return leaves.length;
    }).entries(data);
    nested_age_data = age_data;
    console.log('age_data: ', age_data);
    test_data = age_data[6];
    console.log('test_data: ', test_data);
    return plot_age_horz_stacked_bar(test_data.values);
  });

  on_province_clicked = function(e) {
    var group, province_name, render_data, _i, _len;
    console.log('on_province_clicked ', e);
    if (e.target.id in province_id_map) {
      province_name = province_id_map[e.target.id];
      console.log('selected :', province_name);
      for (_i = 0, _len = nested_age_data.length; _i < _len; _i++) {
        group = nested_age_data[_i];
        if (group.key === province_name) {
          render_data = group;
        }
      }
      console.log('render_data: ', render_data);
      return plot_age_horz_stacked_bar(render_data.values);
    }
  };

  country = document.getElementById('country_svg');

  d3.xml("provinces.svg", "image/svg+xml", function(xml) {
    var path, paths, _i, _len;
    console.log('xml doc: ', xml.documentElement);
    country.appendChild(xml.documentElement);
    paths = country.getElementsByTagName('path');
    for (_i = 0, _len = paths.length; _i < _len; _i++) {
      path = paths[_i];
      if (!(path.id.indexOf('c4sa') === 0)) {
        continue;
      }
      path.addEventListener('click', on_province_clicked);
      path.setAttribute('class', 'province');
    }
  });

}).call(this);
